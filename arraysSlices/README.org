#+TITLE: Arrays and Slices

This section follows Arrays and Slices chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/arrays-and-slices][Learn Go with Tests]].

For this program we are going to call our package main. According to common
practice, package main will only contain integration of other packages and not
unit-testable code and hence Go will not allow you to import a package with name
=main=.

To fix this, you will have to rename the main module in =go.mod= to any other name.

Arrays have a /fixed/ capacity which you define when you declare the variable. We
can initialize an array in two ways:
- [N]type{value1, value2, ..., valueN}:
  ~numbers := [5]int{1, 2, 3, 4, 5}~
- [...]type{value1, value2, ..., valueN}:
  ~numbers := [...]int{1, 2, 3, 4, 5}~

In this program we also use =range= to in our =for= loop logic. =range= lets you
iterate over an array. On each iteration, =range= returns two values - the index
and the value. We are choosing to ignore the index value by using =_=
[[https://go.dev/doc/effective_go#blank][blank identifier]].

[[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/arrays-and-slices#arrays-and-their-type][Arrays vs Slices]]:
#+BEGIN_QUOTE
An interesting property of arrays is that the size is encoded in its type. If
you try to pass an =[4]int= into a function that expects =[5]int=, it won't
compile. They are different types so it's just the same as trying to pass a
=string= into a function that wants an =int=.

You may be thinking it's quite cumbersome that arrays have a fixed length, and
most of the time you probably won't be using them!

Go has slices which do not encode the size of the collection and instead can
have any size.
#+END_QUOTE

Additional documentation on slices: https://go.dev/doc/effective_go#slices.

Go's built-in testing toolkit features a [[https://go.dev/blog/cover][coverage]] tool. Whilst striving for 100%
coverage should not be your end goal, the coverage tool can help identify areas
of your code not covered by tests. If you have been strict with TDD, it's quite
likely you'll have close to 100% coverage anyway.

Also in this program we will use [[https://gobyexample.com/variadic-functions][variadic]] functions. Variadic functions can take
an arbitrary number of =int=s as arguments.
