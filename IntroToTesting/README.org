#+TITLE: Intro to Testing in Go

This directory just contains Notes and sample programs I made while working
through the "[[https://www.udemy.com/course/introduction-to-testing-in-go-golang/][Introduction to Testing in Go]]" course on Udemy.

* Programs:
  I would work through the programs in this directory in the following order to
  follow along with the structure of the course:
  - 1. :: [[./primeNumbers/][Simple Testing]]
  - 2. :: [[./webapp/][Testing Web Applications]]

* Notes:
  Tests can be run with ~go test .~. We can get verbose test output with:
  ~go test -v .~. We can also see the coverage of our tests with:
  ~go test -cover .~

  If we want to see which percentage in particular is covered we can run:
  ~go test -coverprofile=<filename>~ to our test coverage results to a file. To
  use this file we can run: ~go tool cover -html=<filename>~ this will open our
  default web browser with a page showing which lines specifically of our code
  base are being covered by our tests! The green lines signify what our test
  cases are covering and the red lines represent lines of code that may not be
  covered by our tests.

  We can run individual tests with the following:
  ~go test -run <test function>~, where =<test function>= is the name of the
  specific test we want to run.

  We can also specify groups of tests we want to run with:
  ~go test -run Test_<label> .~, where =<label>= is label set in the name of
  each test in a suite. See [[./primeNumbers/main_test.go][here]] for an example.

  [[https://medium.com/goingogo/why-use-testmain-for-testing-in-go-dafb52b406bc][TestMain]]

  If there is a directory called [[https://dave.cheney.net/2016/05/10/test-fixtures-in-go][testdata]] it will be ignored by your code, but
  can be used for testing.

** The Repository Pattern
   You need to be able to test your application without any external
   dependencies like DBs, external APIs, etc. The repository pattern is:
   - One of the most common patterns out there
   - Allows us to swap database back ends easily
   - We'll create two repositories: one for Postgres, and one for testing
   - The Test repository does not use a database at all
   - Allows us to write Unit tests without a running database

   [[https://medium.com/@pererikbergman/repository-design-pattern-e28c0f3e4a30]]

** go build tags
   In go you can set a comment at the top of any test file like:
   #+begin_src go
     //go:build integration
   #+end_src

   This is called [[https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md][build tags]] and it is a feature that was added in Go 1.17. What
   this will do is it will cause the tests within that test file to not be run
   unless specified like:
   #+begin_src bash
     go test -tags=integration .
   #+end_src

   Using build tags like this can be helpful when your integration tests take
   much longer than your unit tests and you don't want them to run every time
   you execute your tests.
