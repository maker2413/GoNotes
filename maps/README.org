#+TITLE: Maps

This section follows the Maps chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/maps][Learn Go with Tests]].

Maps allow you to store items in a manner similar to a dictionary. You can think
of the ~key~ as the word and the ~value~ as the definition. And what better way
is there to learn about Maps than to build our own dictionary?

* [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/maps#pointers-copies-et-al][Pointers, copies, and others]]
  An interesting property of maps is that you can modify them without passing as
  an address to it (e.g =&myMap=)

  This may make them /feel/ like a "reference type", [[https://dave.cheney.net/2017/04/30/if-a-map-isnt-a-reference-variable-what-is-it][but as Dave Cheney describes]]
  they are not.

  #+BEGIN_QUOTE
  A map value is a pointer to a runtime.hmap structure.
  #+END_QUOTE

  So when you pass a map to a function/method, you are indeed copying it, but
  just the pointer part, not the underlying data structure that contains the
  data.

  A gotcha with maps is that they can be a =nil= value. A =nil= map behaves like
  an empty map when reading, but attempts to write to a =nil= map will cause a
  runtime panic. You can read more about maps [[https://go.dev/blog/maps][here]].

  Therefore, you should never initialize a nil map variable:
  #+begin_src go
    var m map[string]string
  #+end_src

  Instead, you can initialize an empty map or use the =make= keyword to create a
  map for you:
  #+begin_src go
    var dictionary = map[string]string{}

    // OR
    var dictionary = make(map[string]string)
  #+end_src

  Both approaches create an empty =hash map= and point =dictionary= at it. Which,
  ensures that you will never get a runtime panic.
