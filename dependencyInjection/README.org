#+TITLE: Dependency Injection

This section follows Dependency Injection chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/dependency-injection][Learn Go with Tests]].

It is assumed that you have read the [[../structsMethodsInterfaces/README.org][structs]] section before as some
understanding of interfaces will be needed for this.

There are a lot of misunderstandings around dependency injection around the
programming community. Hopefully, this guide will show you how:
- You don't need a framework
- It does not overcomplicate your design
- It facilitates testing
- It allows you to write great, general-purpose functions.

We want to write a function that greets someone, just like we did in the
[[../helloWorld/README.org][hello-world]] chapter but this time we are going to be testing the actual
printing.

Just to recap, here is what that function could look like:
#+begin_src go
  func Greet(name string) {
          fmt.Printf("Hello, %s", name)
  }
#+end_src

But how can we test this? Calling ~fmt.Printf~ prints to stdout, which is pretty
hard for us to capture using the testing framework.

What we need to do is to be able to *inject* (which is just a fancy word for
pass in) the dependency of printing.

*Our function doesn't need to care /where/ or /how/ the printing happens, so we
should accept an /interface/ rather than a concrete type.*

If we do that, we can then change the implementation to print to something we
control so that we can test it. In "real life" you would inject in something
that writes to stdout.

If you look at the source code of ~fmt.Printf~ you can see a way for us to hook
in:
#+begin_src go
  // It returns the number of bytes written and any write error encountered.
  func Printf(format string, a ...interface{}) (n int, err error) {
          return Fprintf(os.Stdout, format, a...)
  }
#+end_src

Interesting! Under the hood ~Printf~ just calls ~Fprintf~ passing in
~os.Stdout~.

What exactly is an ~os.Stdout~? What does ~Fprintf~ expect to get passed to it
for the 1st argument?
#+begin_src go
  func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {
          p := newPrinter()
          p.doPrintf(format, a)
          n, err = w.Write(p.buf)
          p.free()
          return
  }
#+end_src

An ~io.Writer~:
#+begin_src go
  type Writer interface {
          Write(p []byte) (n int, err error)
  }
#+end_src

From this we can infer that ~os.Stdout~ implements ~io.Writer~; ~Printf~ passes
~os.Stdout~ to ~Fprintf~ which expects an ~io.Writer~.

As you write more Go code you will find this interface popping up a lot because
it's a great general purpose interface for "put this data somewhere".

So we know under the covers we're ultimately using ~Writer~ to send our greeting
somewhere. Let's use this existing abstraction to make our code testable and
more reusable.
