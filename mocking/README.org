#+TITLE: Mocking

This section follows the Mocking chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/mocking][Learn Go with Tests]].

You have been asked to write a program which counts down from 3, printing each
number on a new line (with a 1-second pause) and when it reaches zero it will
print "Go!" and exit:
#+BEGIN_EXAMPLE
  3
  2
  1
  Go!
#+END_EXAMPLE

* But isn't mocking evil?
  You may have heard mocking is evil. Just like anything in software development
  it can be used for evil, just like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]].

  People normally get in to a bad state when they don't listen to their tests
  and are /not respecting the refactoring stage/.

  If your mocking code is becoming complicated or you are having to mock out
  lots of things to test something, you should listen to that bad feeling and
  think about your code. Usually it is a sign of:
  - The thing you are testing is having to do too many things (because it has
    too many dependencies to mock).
    - Break the module apart so it does less.
  - Its dependencies are too fine-grained.
    - Think about how you can consolidate some of these dependencies into one
      meaningful module.
  - Your test is too concerned with implementation details.
    - Favor testing expected behaviour rather than the implementation.

  Normally a lot of mocking points to /bad abstraction/ in your code.

  *What people see here is a weakness in TDD but it is actually a strength*,
   more often than not poor test code is a result of bad design or put more
   nicely, well-designed code is easy to test.

* Mocking
  - *Without mocking important areas of your code will be untested*. In our case
    we would not be able to test that our code paused between each print but
    there are countless other examples. Calling a service that can fail? Wanting
    to test your system in a particular state? It is very hard to test these
    scenarios without mocking.
  - Without mocks you may have to set up databases and other third parties
    things just to test simple business rules. You're likely to have slow tests,
    resulting in *slow feedback loops*.
  - By having to spin up a database or a webservice to test something you're
    likely to have *fragile tests* due to the unreliability of such services.

  Once a developer learns about mocking it becomes very easy to over-test every
  single facet of a system in terms of the way it works rather than what it
  does. Always be mindful about *the value of your tests* and what impact they
  would have in future refactoring.

  In this post about mocking we have only covered *Spies*, which are a kind of
  mock. Mocks are a type of "test double."
  #+BEGIN_QUOTE
  [[https://martinfowler.com/bliki/TestDouble.html][Test Double is a generic term for any case where you replace a production
  object for testing purposes.]]
  #+END_QUOTE

  Under test doubles, there are various types like stubs, spies and indeed
  mocks! Check out [[https://martinfowler.com/bliki/TestDouble.html][Martin Fowler's post]] for more detail.
