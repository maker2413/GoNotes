#+TITLE: Context

This section follows the Context chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/context][Learn Go with Tests]].

Software often kicks off long-running, resource-intensive processes (often in
goroutines). If the action that caused this gets cancelled or fails for some
reason you need to stop these processes in a consistent way through your
application.

If you don't manage this your snappy Go application that you're so proud of
could start having difficult to debug performance problems.

In this chapter we'll use the package ~context~ to help us manage long-running
processes.

We're going to start with a classic example of a web server that when hit kicks
off a potentially long-running process to fetch some data for it to return in
the response.

We will exercise a scenario where a user cancels the request before the data can
be retrieved and we'll make sure the process is told to give up.

From the [[https://go.dev/blog/context][Go Blog: Context]]:
#+BEGIN_QUOTE
The context package provides functions to derive new Context values from
existing ones. These values form a tree: when a Context is canceled, all
Contexts derived from it are also canceled.
#+END_QUOTE

It's important that you derive your contexts so that cancellations are
propagated throughout the call stack for a given request.

One of the main points of ~context~ is that it is a consistent way of offering
cancellation.

[[https://pkg.go.dev/context][From the go doc]]
#+BEGIN_QUOTE
Incoming requests to a server should create a Context, and outgoing calls to
servers should accept a Context. The chain of function calls between them must
propagate the Context, optionally replacing it with a derived Context created
using WithCancel, WithDeadline, WithTimeout, or WithValue. When a Context is
canceled, all Contexts derived from it are also canceled.
#+END_QUOTE

From the [[https://go.dev/blog/context][Go Blog: Context]] again:
#+BEGIN_QUOTE
At Google, we require that Go programmers pass a Context parameter as the first
argument to every function on the call path between incoming and outgoing
requests. This allows Go code developed by many different teams to interoperate
well. It provides simple control over timeouts and cancelation and ensures that
critical values like security credentials transit Go programs properly.
#+END_QUOTE

* What we've covered
  - How to test a HTTP handler that has had the request cancelled by the client.
  - How to use context to manage cancellation.
  - How to write a function that accepts context and uses it to cancel itself by
    using goroutines, select and channels.
  - Follow Google's guidelines as to how to manage cancellation by propagating
    request scoped context through your call-stack.
  - How to roll your own spy for http.ResponseWriter if you need it.

* What about context.Value ?
  [[https://faiface.github.io/post/context-should-go-away-go2/][Michal Štrba]] has an opinion:
  #+BEGIN_QUOTE
  If you use ctx.Value in my (non-existent) company, you’re fired
  #+END_QUOTE

  Some engineers have advocated passing values through ~context~ as it
  /feels convenient/.

  Convenience is often the cause of bad code.

  The problem with ~context.Values~ is that it's just an untyped map so you have
  no type-safety and you have to handle it not actually containing your
  value. You have to create a coupling of map keys from one module to another
  and if someone changes something things start breaking.

  In short, *if a function needs some values, put them as typed parameters
  rather than trying to fetch them from* ~context.Value~. This makes it
  statically checked and documented for everyone to see.

  *But...*

  On other hand, it can be helpful to include information that is orthogonal to
  a request in a context, such as a trace id. Potentially this information would
  not be needed by every function in your call-stack and would make your
  functional signatures very messy.

  [[https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39][Jack Lindamood says *Context.Value should inform, not control*]]
  #+BEGIN_QUOTE
  The content of context.Value is for maintainers not users. It should never be
  required input for documented or expected results.
  #+END_QUOTE
