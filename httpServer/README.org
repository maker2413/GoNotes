#+TITLE: HTTP Server

This section follows the HTTP server tests chapter of the [[https://quii.gitbook.io/learn-go-with-tests/build-an-application/http-server][Learn Go with Tests]].

You have been asked to create a web server where users can track how many games
players have won.
- ~GET /players/{name}~ should return a number indicating the total number of
  wins.
- ~POST /players/{name}~ should record a win for that name, incrementing for
  every subsequent ~POST~.

We will follow the TDD approach, getting working software as quickly as we can
and then making small iterative improvements until we have the solution. By
taking this approach we
- Keep the problem space small at any given time.
- Don't go down rabbit holes.
- If we ever get stuck/lost, doing a revert wouldn't lose loads of work.

* Red, green, refactor
  Throughout this book, we have emphasised the TDD process of write a test &
  watch it fail (red), write the /minimal/ amount of code to make it work
  (green) and then refactor.

  This discipline of writing the minimal amount of code is important in terms of
  the safety TDD gives you. You should be striving to get out of "red" as soon
  as you can.

  Kent Beck describes it as:
  #+BEGIN_QUOTE
  Make the test work quickly, committing whatever sins necessary in process.
  #+END_QUOTE

  You can commit these sins because you will refactor afterwards backed by the
  safety of the tests.

** What if you don't do this?
   The more changes you make while in red, the more likely you are to add more
   problems, not covered by tests.

   The idea is to be iteratively writing useful code with small steps, driven by
   tests so that you don't fall into a rabbit hole for hours.

** Chicken and egg
   How can we incrementally build this? We can't ~GET~ a player without having
   stored something and it seems hard to know if ~POST~ has worked without the
   ~GET~ endpoint already existing.

   This is where /mocking/ shines.
   - ~GET~ will need a ~PlayerStore~ /thing/ to get scores for a player. This
     should be an interface so when we test we can create a simple stub to test
     our code without needing to have implemented any actual storage code.
   - For ~POST~ we can /spy/ on its calls to ~PlayerStore~ to make sure it
     stores players correctly. Our implementation of saving won't be coupled to
     retrieval.
   - For having some working software quickly we can make a very simple
     in-memory implementation and then later we can create an implementation
     backed by whatever storage mechanism we prefer.

* Write the test first
  We can write a test and make it pass by returning a hard-coded value to get us
  started. Kent Beck refers this as "Faking it". Once we have a working test we
  can then write more tests to help us remove that constant.

  By doing this very small step, we can make the important start of getting an
  overall project structure working correctly without having to worry too much
  about our application logic.

  To create a web server in Go you will typically call [[https://pkg.go.dev/net/http#ListenAndServe][ListenAndServe]].
  #+begin_src go
    func ListenAndServe(addr string, handler Handler) error
  #+end_src

  This will start a web server listening on a port, creating a goroutine for
  every request and running it against a ~Handler~.
  #+begin_src go
    type Handler interface {
            ServeHTTP(ResponseWriter, *Request)
    }
  #+end_src

  A type implements the Handler interface by implementing the ~ServeHTTP~ method
  which expects two arguments, the first is where we /write our response/ and
  the second is the HTTP request that was sent to the server.

* ~http.HandlerFunc~
  Earlier we explored that the ~Handler~ interface is what we need to implement
  in order to make a server. /Typically/ we do that by creating a ~struct~ and
  make it implement the interface by implementing its own ServeHTTP
  method. However the use-case for structs is for holding data but currently we
  have no state, so it doesn't feel right to be creating one.

  [[https://pkg.go.dev/net/http#HandlerFunc][HandlerFunc]] lets us avoid this.
  #+BEGIN_QUOTE
  The HandlerFunc type is an adapter to allow the use of ordinary functions as
  HTTP handlers. If f is a function with the appropriate signature,
  HandlerFunc(f) is a Handler that calls f.
  #+END_QUOTE

  #+begin_src go
    type HandlerFunc func(ResponseWriter, *Request)
  #+end_src

  From the documentation, we see that type ~HandlerFunc~ has already implemented
  the ~ServeHTTP~ method. By type casting our ~PlayerServer~ function with it,
  we have now implemented the required ~Handler~.

** http.ListenAndServe(":5000"...)
   ~ListenAndServe~ takes a port to listen on a ~Handler~. If there is a problem
   the web server will return an error, an example of that might be the port
   already being listened to. For that reason we wrap the call in ~log.Fatal~ to
   log the error to the user.

   What we're going to do now is write /another/ test to force us into making a
   positive change to try and move away from the hard-coded value.
