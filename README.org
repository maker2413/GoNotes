#+TITLE: Go Notes

This repo is just my playground to learn and try to take notes on things I learn
in Golang. These notes are not going to be a perfect read, but are rather
intended to be reference documents for snippets of knowledge or examples. These
notes are just little jots I make while I learn and will include spelling
mistakes, bad grammar, and a complete disregard for past, present, and future
tense. So far I have been following this guide:
https://quii.gitbook.io/learn-go-with-tests/ and have been loving it.

* Go Fundamentals:
  - 1. :: [[./helloWorld/README.org][Hello World]]
  - 2. :: [[./integers/README.org][Integers]]
  - 3. :: [[./iteration/README.org][Iteration]]
  - 4. :: [[./arraysSlices/README.org][Arrays and Slices]]
  - 5. :: [[./structsMethodsInterfaces/README.org][Struct, Methods, and Interfaces]]
  - 6. :: [[./pointers/README.org][Pointers & errors]]
  - 7. :: [[./maps/README.org][Maps]]
  - 8. :: [[./dependencyInjection/README.org][Dependency Injection]]
  - 9. :: [[./mocking/README.org][Mocking]]
  - 10. :: [[./concurrency/README.org][Concurrency]]
  - 11. :: [[./select/README.org][Select]]
  - 12. :: [[./reflection/README.org][Reflection]]
  - 13. :: [[./sync/README.org][Sync]]
  - 14. :: [[./context/README.org][Context]]
  - 15. :: [[./propertyTests/README.org][Intro to property based tests]]
  - 16. :: [[./maths/README.org][Maths]]
  - 17. :: [[./readingFiles/README.org][Reading files]]
  - 18. :: [[./templating/README.org][Templating]]
  - 19. :: [[./generics/README.org][Generics]]
  - 20. :: [[./revisitingArrays/README.org][Revisiting arrays and slices with generics]]

* Testing Fundamentals
  - 1. :: [[./acceptanceTests/README.org][Introduction to acceptance tests]]
  - 2. :: [[./scalingAcceptance/README.org][Scaling acceptance tests]]
  - 3. :: [[./workingWithoutMocks/README.org][Working without mocks]]
  - 4. :: [[./refactoringChecklist/README.org][Refactoring checklist]]

* Build an Application
  Now that you have hopefully digested the Go Fundamentals section you have a
  solid grounding of a majority of Go's language features and how to do TDD.

  This next section will involve building an application.

  Each chapter will iterate on the previous one, expanding the application's
  functionality as our product owner dictates.

  New concepts will be introduced to help facilitate writing great code but most
  of the new material will be learning what can be accomplished from Go's
  standard library.

  By the end of this, you should have a strong grasp as to how to iteratively
  write an application in Go, backed by tests.
  - 1. :: [[./httpServer/README.org][HTTP server]]

* Other courses
  I also have worked through a couple of Udemy courses on Go and I have included
  my notes on those:
  - 1. :: [[./IntroToTesting/README.org][Introduction to Testing in Go]]
  - 2. :: [[./WorkingWithConcurrency/README.org][Working with Concurrency in Go]]
  - 3. :: [[./Microservices/README.org][Working with Microservices in Go]]

* Project Layout
  Since the very first time I looked at a Go repository I have been very
  confused by the structure of the directories within a project. Luckily it
  seems that there are no hard rules around project layout from the core Go team
  unless you are intending your code to be an public module in which case there
  are some rules so that ~go mod~ can properly important your module.

  I did find this repository that describes general guidelines that have been
  accepted by the larger Go community: [[https://github.com/golang-standards/project-layout][here]].

  [[https://github.com/golang-standards/project-layout?tab=readme-ov-file#go-directories][Go Directories]]:
  - ~/cmd~:
    Main applications for this project.

    The directory name for each application should match the name of the
    executable you want to have (e.g., ~/cmd/myapp~).

    Don't put a lot of code in the application directory. If you think the code
    can be imported and used in other projects, then it should live in the
    ~/pkg~ directory. If the code is not reusable or if you don't want others to
    reuse it, put that code in the ~/internal~ directory. You'll be surprised
    what others will do, so be explicit about your intentions!

    It's common to have a small ~main~ function that imports and invokes the
    code from the ~/internal~ and ~/pkg~ directories and nothing else.

    See the [[https://github.com/golang-standards/project-layout/blob/master/cmd/README.md][/cmd]] directory for examples.
  - ~/internal~

* Practice programs
  This is just some random practice programs I have done to test myself. To view
  these please go [[./PracticePrograms/README.org][here]].
