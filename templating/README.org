#+TITLE: Templating

This section follows the Templating chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/html-templates][Learn Go with Tests]].

We live in a world where everyone wants to build web applications with the
latest flavour of the month frontend framework built upon gigabytes of
transpiled JavaScript, working with a Byzantine build system;
[[https://quii.dev/The_Web_I_Want][but maybe that's not always necessary]].

I'd say most Go developers value a simple, stable & fast toolchain but the
frontend world frequently fails to deliver on this front.

Many websites do not need to be an [[https://en.wikipedia.org/wiki/Single-page_application][SPA]]. *HTML and CSS are fantastic ways of
delivering content* and you can use Go to make a website to deliver HTML.

If you wish to still have some dynamic elements, you can still sprinkle in some
client side JavaScript, or you may even want to try experimenting with [[https://hotwired.dev/][Hotwire]]
which allows you to deliver a dynamic experience with a server-side approach.

You can generate your HTML in Go with elaborate usage of ~fmt.Fprintf~, but in
this chapter you'll learn that Go's standard library has some tools to generate
HTML in a simpler and more maintainable way. You'll also learn more effective
ways of testing this kind of code that you may not have run in to before.

* Introducing templates
  Go has two templating packages [[https://pkg.go.dev/text/template][text/template]] and [[https://pkg.go.dev/html/template][html/template]] and they share
  the same interface. What they both do is allow you to combine a template and
  some data to produce a string.

  What's the difference with the HTML version?
  #+BEGIN_QUOTE
  Package template (html/template) implements data-driven templates for
  generating HTML output safe against code injection. It provides the same
  interface as package text/template and should be used instead of text/template
  whenever the output is HTML.
  #+END_QUOTE

  The templating language is very similar to [[https://mustache.github.io/][Mustache]] and allows you to
  dynamically generate content in a very clean fashion with a nice separation of
  concerns. Compared to other templating languages you may have used, it is very
  constrained or "logic-less" as Mustache likes to say. This is an important,
  *and deliberate* design decision.

  Whilst we're focusing on generating HTML here, if your project is doing
  complex string concatenations and incantations, you might want to reach for
  ~text/template~ to clean up your code.

  Templates also give you some programming primitives like ~range~ to loop over
  values, and ~if~. You can find more details in the
  [[https://pkg.go.dev/text/template][text/template documentation]].

* Embed?
  Embed was lightly touched on in [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/reading-files][reading files]]. The
  [[https://pkg.go.dev/embed][documentation from the standard library explains]].
  #+BEGIN_QUOTE
  Package embed provides access to files embedded in the running Go program.

  Go source files that import "embed" can use the //go:embed directive to
  initialize a variable of type string, []byte, or FS with the contents of files
  read from the package directory or subdirectories at compile time.
  #+END_QUOTE

  Why would we want to use this? Well the alternative is that we can load our
  templates from a "normal" file system. However this means we'd have to make
  sure that the templates are in the correct file path wherever we want to use
  this software. In your job you may have various environments like development,
  staging and live. For this to work, you'd need to make sure your templates are
  copied to the correct place.

  With embed, the files are included in your Go program when you build it. This
  means once you've built your program (which you should only do once), the
  files are always available to you.

  What's handy is you can not only embed individual files, but also file
  systems; and that filesystem implements [[https://pkg.go.dev/io/fs][io/fs]] which means your code doesn't
  need to care what kind of file system it is working with.

  If you wish to use different templates depending on configuration though, you
  may wish to stick to loading templates from disk in the more conventional way.

* Introducing Approval Tests
  [[https://github.com/approvals/go-approval-tests][Go Approval Tests]]
  #+BEGIN_QUOTE
  ApprovalTests allows for easy testing of larger objects, strings and anything
  else that can be saved to a file (images, sounds, CSV, etc...)
  #+END_QUOTE

  The idea is similar to "golden" files, or snapshot testing. Rather than
  awkwardly maintaining strings within a test file, the approval tool can
  compare the output for you with an "approved" file you created. You then
  simply copy over the new version if you approve it. Re-run the test and you're
  back to green.

  To add approval tests to your program add the following to your imports:
  ~approvals "github.com/approvals/go-approval-tests"~. Then run ~go mod tidy~
  to install the library.

  We are actually doing a fairly minor usage of approval tests, which are an
  extremely useful tool in your testing arsenal. [[https://twitter.com/emilybache][Emily Bache]] has an
  [[https://www.youtube.com/watch?v=zyM2Ep28ED8][interesting video where she uses approval tests to add an incredibly extensive
  set of tests to a complicated codebase that has zero tests]]. "Combinatorial
  Testing" is definitely something worth looking into.

* Wrapping up
  If you combine your learnings of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/reading-files][reading files]] chapter and this one, you
  can comfortably make a well-tested, simple, static site generator and spin up
  a blog of your own. Find some CSS tutorials and you can make it look nice too.

  This approach extends beyond blogs. Taking data from any source, be it a
  database, an API or a file-system and converting it into HTML and returning it
  from a server is a simple technique spanning many decades. People like to
  bemoan the complexity of modern web development but are you sure you're not
  just inflicting the complexity on yourself?

  Go is wonderful for web development, especially when you think clearly about
  what your real requirements are for the website you're making. Generating HTML
  on the server is often a better, simpler and more performant approach than
  creating a "web application" with technologies like React.

** What we've learned
   - How to create and render HTML templates.
   - How to compose templates together and [[https://en.wikipedia.org/wiki/Don't_repeat_yourself][DRY]] up related markup and help us
     keep a consistent look and feel.
   - How to pass functions into templates, and why you should think twice about
     it.
   - How to write "Approval Tests", which help us test the big ugly output of
     things like template renderers.

** On logic-less templates
   As always, this is all about *separation of concerns*. It's important we
   consider what the responsibilities are of the various parts of our
   system. Too often people leak important business logic into templates, mixing
   up concerns and making systems difficult to understand, maintain and test.

** Not just for HTML
   Remember that go has text/template to generate other kinds of data from a
   template. If you find yourself needing to transform data into some kind of
   structured output, the techniques laid out in this chapter can be useful.
