#+TITLE: Concurrency

This section follows the Concurrency chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/concurrency][Learn Go with Tests]].

This section uses concurrency to speed up our program. This section covers:
- /goroutines/, the basic unit of concurrency in Go, which let us manage more
  than one website check request.
- /anonymous functions/, which we used to start each of the concurrent processes
  that check websites.
- /channels/, to help organize and control the communication between the
  different processes, allowing us to avoid a race condition bug.
- /the race detector/ which helped us debug problems with concurrent code.

* Make it fast
  One formulation of an agile way of building software, often misattributed to
  Kent Beck, is:
  #+BEGIN_QUOTE
  [[https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast][Make it work, make it right, make it fast]]
  #+END_QUOTE

  Where 'work' is making the tests pass, 'right' is refactoring the code, and
  'fast' is optimizing the code to make it, for example, run quickly. We can
  only 'make it fast' once we've made it work and made it right. We were lucky
  that the code we were given was already demonstrated to be working, and didn't
  need to be refactored. We should never try to 'make it fast' before the other
  two steps have been performed because:
  #+BEGIN_QUOTE
  [[https://wiki.c2.com/?PrematureOptimization][Premature optimization is the root of all evil]] -- Donald Knuth
  #+END_QUOTE
