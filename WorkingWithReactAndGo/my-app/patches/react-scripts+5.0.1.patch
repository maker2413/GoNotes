diff --git a/node_modules/react-scripts/config/webpackDevServer.config.js b/node_modules/react-scripts/config/webpackDevServer.config.js
index 522a81b..0f79905 100644
--- a/node_modules/react-scripts/config/webpackDevServer.config.js
+++ b/node_modules/react-scripts/config/webpackDevServer.config.js
@@ -99,7 +99,7 @@ module.exports = function (proxy, allowedHost) {
       publicPath: paths.publicUrlOrPath.slice(0, -1),
     },
 
-    https: getHttpsConfig(),
+    server: getHttpsConfig() ? { type: 'https', options: getHttpsConfig() === true ? undefined : getHttpsConfig() } : { type: 'http' },
     host,
     historyApiFallback: {
       // Paths with dots should still use the history fallback.
@@ -109,27 +109,24 @@ module.exports = function (proxy, allowedHost) {
     },
     // `proxy` is run between `before` and `after` `webpack-dev-server` hooks
     proxy,
-    onBeforeSetupMiddleware(devServer) {
-      // Keep `evalSourceMapMiddleware`
-      // middlewares before `redirectServedPath` otherwise will not have any effect
-      // This lets us fetch source contents from webpack for the error overlay
+    setupMiddlewares(middlewares, devServer) {
+      if (!devServer) {
+        return middlewares;
+      }
+      // Keep `evalSourceMapMiddleware` before `redirectServedPath` otherwise will not have any effect
       devServer.app.use(evalSourceMapMiddleware(devServer));
 
       if (fs.existsSync(paths.proxySetup)) {
-        // This registers user provided middleware for proxy reasons
         require(paths.proxySetup)(devServer.app);
       }
-    },
-    onAfterSetupMiddleware(devServer) {
+
       // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match
       devServer.app.use(redirectServedPath(paths.publicUrlOrPath));
 
-      // This service worker file is effectively a 'no-op' that will reset any
-      // previous service worker registered for the same host:port combination.
-      // We do this in development to avoid hitting the production cache if
-      // it used the same host and port.
-      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432
+      // Reset any previously registered service worker
       devServer.app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));
+
+      return middlewares;
     },
   };
 };
diff --git a/node_modules/react-scripts/scripts/start.js b/node_modules/react-scripts/scripts/start.js
index 8b9a2c2..820f336 100644
--- a/node_modules/react-scripts/scripts/start.js
+++ b/node_modules/react-scripts/scripts/start.js
@@ -121,6 +121,7 @@ checkBrowsers(paths.appPath, isInteractive)
       port,
     };
     const devServer = new WebpackDevServer(serverConfig, compiler);
+    if (!devServer.close && typeof devServer.stop === 'function') { devServer.close = (cb) => devServer.stop().then(() => { if (cb) cb(); }); }
     // Launch WebpackDevServer.
     devServer.startCallback(() => {
       if (isInteractive) {
