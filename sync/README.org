#+TITLE: Sync

This section follows the Sync chapter of the [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/sync][Learn Go with Tests]].

During this section we will be using ~sync.WaitGroup~ which is a convenient way
of synchronising concurrent processes.

#+BEGIN_QUOTE
A WaitGroup waits for a collection of goroutines to finish. The main goroutine
calls Add to set the number of goroutines to wait for. Then each of the
goroutines runs and calls Done when finished. At the same time, Wait can be used
to block until all goroutines have finished.
#+END_QUOTE

We will also learn about mutex locking Go. Go's Mutex provides such a lock:

#+BEGIN_QUOTE
A Mutex is a mutual exclusion lock. The zero value for a Mutex is an unlocked
mutex.
#+END_QUOTE

* I've seen other examples where the sync.Mutex is embedded into the struct.
  You may see examples like this:
  #+begin_src go
    type Counter struct {
            sync.Mutex
            value int
    }
  #+end_src

  It can be argued that it can make the code a bit more elegant.
  #+begin_src go
    func (c *Counter) Inc() {
            c.Lock()
            defer c.Unlock()
            c.value++
    }
  #+end_src

  This looks nice but while programming is a hugely subjective discipline, this
  is *bad and wrong*.

  Sometimes people forget that embedding types means the methods of that type
  become /part of the public interface/; and you often will not want
  that. Remember that we should be very careful with our public APIs, the moment
  we make something public is the moment other code can couple themselves to
  it. We always want to avoid unnecessary coupling.

  Exposing Lock and Unlock is at best confusing but at worst potentially very
  harmful to your software if callers of your type start calling these methods.

  [[file:example.png]]

  This seems like a really bad idea

* Wrapping up
  We've covered a few things from the [[https://pkg.go.dev/sync][sync package]]:
  - ~Mutex~ allows us to add locks to our data
  - ~WaitGroup~ is a means of waiting for goroutines to finish jobs

** When to use locks over channels and goroutines?
   [[https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/concurrency][We've previously covered goroutines in the first concurrency chapter]] which
   let us write safe concurrent code so why would you use locks?
   [[https://go.dev/wiki/MutexOrChannel][The go wiki has a page dedicated to this topic; Mutex Or Channel]]

   #+BEGIN_QUOTE
   A common Go newbie mistake is to over-use channels and goroutines just
   because it's possible, and/or because it's fun. Don't be afraid to use a
   sync.Mutex if that fits your problem best. Go is pragmatic in letting you use
   the tools that solve your problem best and not forcing you into one style of
   code.
   #+END_QUOTE

   Paraphrasing:
   - *Use channels when passing ownership of data*
   - *Use mutexes for managing state*

** go vet
   Remember to use go vet in your build scripts as it can alert you to some
   subtle bugs in your code before they hit your poor users.

** Don't use embedding because it's convenient
   - Think about the effect embedding has on your public API.
   - Do you /really/ want to expose these methods and have people coupling their
     own code to them?
   - With respect to mutexes, this could be potentially disastrous in very
     unpredictable and weird ways, imagine some nefarious code unlocking a mutex
     when it shouldn't be; this would cause some very strange bugs that will be
     hard to track down.

# Local Variables:
# org-image-actual-width: (1024)
# End:
